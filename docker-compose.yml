x-hades-environment: &hades_environment
  SECRET_KEY: ${SECRET_KEY}
  CELERY_BROKER_URL: "redis://redis:6379/0"
  RESULT_BACKEND: "redis://redis:6379/0"
  REDIS_URL: "redis://redis:6379/0"
  MAIL_SERVER: ${MAIL_SERVER}
  MAIL_PORT: ${MAIL_PORT}
  MAIL_USERNAME: ${MAIL_USERNAME}
  MAIL_PASSWORD: ${MAIL_PASSWORD}
  DATABASE_URI: "postgresql://hades:hades@postgres/hades"

x-postgres-environment: &postgres_environment
    POSTGRES_USER: ${POSTGRES_USER}
    POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    POSTGRES_DB: "hades"

services:
  web1:
    build: .
    image: hades:latest
    command: gunicorn -b "0.0.0.0:8001" -k gevent --workers 1 --threads 2 'app:create_app()' --reload
    volumes:
      - .:/app
    depends_on:
      - redis
      - postgres
    restart: always
    environment:
      <<: *hades_environment
  web2:
    build: .
    image: hades:latest
    command: gunicorn -b "0.0.0.0:8002" -k gevent --workers 1 --threads 2 'app:create_app()' --reload
    volumes:
      - .:/app
    depends_on:
      - redis
      - postgres
    restart: always
    environment:
      <<: *hades_environment
  worker1:
    build: .
    image: hades:latest
    command: celery -A app.celery worker --loglevel=info --pool=solo --hostname=worker1
    volumes:
      - .:/app
    depends_on:
      - redis
      - postgres
    restart: always
    environment:
      <<: *hades_environment
  worker2:
    build: .
    image: hades:latest
    command: celery -A app.celery worker --loglevel=info --pool=solo --hostname=worker2
    volumes:
      - .:/app
    depends_on:
      - redis
      - postgres
    restart: always
    environment:
      <<: *hades_environment
  redis:
    image: redis:latest
    restart: always
  postgres:
    image: postgres:latest
    volumes:
      - ./app/storage/database:/var/lib/postgresql/data
    restart: always
    environment:
      <<: *postgres_environment
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - web1
      - web2
    restart: always